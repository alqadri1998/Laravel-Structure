<?phpnamespace App\Http\Middleware;use Closure;class RolesMiddleware {    /**     * Handle an incoming request.     *     * @param  \Illuminate\Http\Request  $request     * @param  \Closure  $next     * @return mixed     */    public function handle($request, Closure $next, $requestedPermission='crud', $redirect = true) {        $routeAction = $request->route()->getAction();        $controllerAction = str_replace($routeAction['namespace'].'\\', '', $routeAction['controller']);        $controller = explode('@', $controllerAction);        $permissions = session()->get('PERMISSIONS');        if (isset($permissions[$controller[0]]) && (isset($permissions[$controller[0]][$requestedPermission]) || $requestedPermission=='crud')) {            $controllerPermissions = $permissions[$controller[0]];            if ($requestedPermission=='crud') {                if ($controllerPermissions['create']==1 || $controllerPermissions['read']==1 || $controllerPermissions['update']==1 || $controllerPermissions['delete']==1) {                    // is authorized                    return $next($request);                }            }            else {                if ($permissions[$controller[0]][$requestedPermission]==1) {                    // is authorized                    return $next($request);                }            }        }        return ((bool)$redirect==TRUE) ? redirect()->back()->withErrors(['error' => 'Access denied']):response('')->setStatusCode(401, 'Access denied!');    }}